# Windows compiler and tools
CC := gcc
RM := del /Q
MKDIR := mkdir

# Project directories
ROOT_DIR := .
SRC_DIR := $(ROOT_DIR)/src
BIN_DIR := $(ROOT_DIR)/bin
OBJ_DIR := $(ROOT_DIR)/obj
LIB_DIR := $(ROOT_DIR)/lib
PROJ_DIR := $(ROOT_DIR)/-p

# OpenSSL configuration for Windows
OPENSSL_DIR := C:\Progra~1\OpenSSL-Win64
OPENSSL_INCLUDE := -I"$(OPENSSL_DIR)/include"

# Library paths and flags
OPENSSL_LIBS := -L"$(LIB_DIR)" -lssl-3-x64 -lcrypto-3-x64

# Windows-specific defines and libraries
WINDOWS_DEFINES := -D_WIN32 -DWIN32_LEAN_AND_MEAN
WINDOWS_LIBS := -lws2_32 -ladvapi32 -lcrypt32 -luser32 -lgdi32

# Compiler flags
CFLAGS := -Wall -Wextra -O2 $(OPENSSL_INCLUDE) $(WINDOWS_DEFINES)
LDFLAGS := -pthread
LIBS := $(OPENSSL_LIBS) $(WINDOWS_LIBS)

# Source files
SRCS := $(wildcard $(SRC_DIR)/*.c)
OBJS := $(SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

# Binary name
TARGET := $(BIN_DIR)/phantomid.exe

# Header files
DEPS := $(wildcard $(SRC_DIR)/*.h)

# Create build directories safely
.PHONY: create_dirs
create_dirs:
	@if not exist "$(BIN_DIR)" ( $(MKDIR) "$(BIN_DIR)" )
	@if not exist "$(OBJ_DIR)" ( $(MKDIR) "$(OBJ_DIR)" )
	@if not exist "$(PROJ_DIR)" ( $(MKDIR) "$(PROJ_DIR)" )

# Default target
.PHONY: all
all: check_env create_dirs $(TARGET)

# Environment check target
.PHONY: check_env
check_env:
	@echo Checking build environment...
	@where gcc >nul 2>&1 || ( echo GCC not found in PATH && exit 1 )
	@if not exist "$(OPENSSL_DIR)\include\openssl\ssl.h" ( echo OpenSSL headers not found in $(OPENSSL_DIR)\include && exit 1 )
	@if not exist "$(LIB_DIR)\libssl-3-x64.dll" ( echo OpenSSL DLLs not found in $(LIB_DIR) && exit 1 )
	@if not exist "$(LIB_DIR)\libcrypto-3-x64.dll" ( echo OpenSSL DLLs not found in $(LIB_DIR) && exit 1 )
	@echo Environment check passed.

# Link the final binary
$(TARGET): $(OBJS)
	@echo Linking $(TARGET)...
	@$(CC) $(OBJS) -o $@ $(LDFLAGS) $(LIBS)
	@echo Build complete.

# Compile source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(DEPS)
	@echo Compiling $<...
	@$(CC) $(CFLAGS) -c $< -o $@

# Copy DLLs
.PHONY: copy_dlls
copy_dlls: $(TARGET)
	@echo Copying DLLs to bin directory...
	@copy /Y "$(LIB_DIR)\libssl-3-x64.dll" "$(BIN_DIR)" >nul
	@copy /Y "$(LIB_DIR)\libcrypto-3-x64.dll" "$(BIN_DIR)" >nul
	@echo DLLs copied successfully.

# Clean build files
.PHONY: clean
clean:
	@echo Cleaning build files...
	@if exist "$(OBJ_DIR)\*" del /Q "$(OBJ_DIR)\*"
	@if exist "$(BIN_DIR)\*" del /Q "$(BIN_DIR)\*"
	@echo Clean complete.

# Run the program
.PHONY: run
run: $(TARGET)
	@echo Running PhantomID...
	@$(TARGET)

# Help target
.PHONY: help
help:
	@echo PhantomID Build System for Windows
	@echo -------------------------------
	@echo Directory Structure:
	@echo   src/     - Source code files
	@echo   lib/     - Library files and DLLs
	@echo   bin/     - Output binaries
	@echo   obj/     - Object files
	@echo   -p/      - Project configuration
	@echo.
	@echo Available targets:
	@echo   all        - Build the project
	@echo   clean      - Remove build files
	@echo   copy_dlls  - Copy DLLs to bin directory
	@echo   help       - Show this help message